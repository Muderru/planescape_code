#include "xscripts.h"
#include "parser_id.h"
#include "strlib.h"
#include "expr.h"

// ïÐÒÅÄÅÌÅÎÉÅ ÏÓÎÏ×ÎÙÈ ÐÁÒÁÍÅÔÒÏÍ
int SCR_NUMBER;  //äåêóô÷éå
int SCR_EXPR;  //õóìï÷éå
int SCR_MESSAGE; //óïïâýåîéå
int SCR_MVNUM;  //óïïâýåîéå.çäå
int SCR_MCHAR;  //óïïâýåîéå.éçòïëõ
int SCR_MROOM;  //óïïâýåîéå.ìïëáãéñ
int SCR_MZONE;  //óïïâýåîéå.ïâìáóôø
int SCR_ERROR;  //ïûéâëá
int SCR_ECHAR;  //ïûéâëá.éçòïëõ
int SCR_EROOM;  //ïûéâëá.ìïëáãéñ
int SCR_EZONE;  //ïûéâëá.ïâìáóôø
int SCR_ESCRIPT; //ïûéâëá.äåêóô÷éå
int SCR_LOAD;  //úáçòõúëá
int SCR_LOBJ;  //úáçòõúëá.ðòåäíåô
int SCR_LEQ;  //úáçòõúëá.éî÷åîôáòø
int SCR_LRANDOM; //úáçòõúëá.óìõþáêîùê
int SCR_LMOB;  //úáçòõúëá.íïîóôò
int SCR_LEXIT;  //úáçòõúëá.÷ùèïä
int SCR_LPORTAL; //úáçòõúëá.ðïòôáì
int SCR_LCHAR;  //úáçòõúëá.éçòïëõ
int SCR_LROOM;  //úáçòõúëá.ìïëáãéñ
int SCR_LGOLD;  //úáçòõúëá.äåîøçé
int SCR_OBJ_LIMIT; //úáçòõúëá.ìéíéô

int SCR_LE_ROOM; // ÷ùèïä.ëïíîáôá
int SCR_LE_DIRECTION; // ÷ùèïä.îáðòá÷ìåîéå (LIST)
int SCR_LE_ROOMNUMBER; // ÷ùèïä.ëïíîáôá (INT)
int SCR_LE_DESCRIPTION; // ÷ùèïä.ïðéóáîéå (STRING)
int SCR_LE_NAME;  // ÷ùèïä.ôéð  (LIST)
int SCR_LE_ALIAS; // ÷ùèïä.óéîïîéí (STRING)
int SCR_LE_KEY;  // ÷ùèïä.ëìàþ  (INT)
int SCR_LE_PROPERTIES; // ÷ùèïä.ó÷ïêóô÷á (VECTOR)
int SCR_LE_QUALITY; // ÷ùèïä.ëáþåóô÷ï
int SCR_LE_TRAP;  // ÷ùèïä.ìï÷õûëá (INT)
int SCR_LE_TRAP_CHANCE; // ÷ùèïä.ìï÷õûëá.ûáîó (INT)
int SCR_LE_TRAP_TYPEDAMAGE; // ÷ùèïä.ìï÷õûëá.ô÷òåä  (LIST)
int SCR_LE_TRAP_FORCEDAMAGE; // ÷ùèïä.ìï÷õûëá.ó÷òåä  (RANDOM)
int SCR_LE_TRAP_SAVE;  // ÷ùèïä.ìï÷õûëá.ðòåúéóô
int SCR_LE_TRAP_MESS_CHAR; // ÷ùèïä.ìï÷õûëá.éçòïë
int SCR_LE_TRAP_MESS_ROOM; // ÷ùèïä.ìï÷õûëá.ëïíîáôá
int SCR_LE_TRAP_MESS_SCHAR; // ÷ùèïä.ìï÷õûëá.òéçòïë
int SCR_LE_TRAP_MESS_SROOM; // ÷ùèïä.ìï÷õûëá.òëïíîáôá
int SCR_LE_TRAP_MESS_KCHAR; // ÷ùèïä.ìï÷õûëá.õâéô_éçòïë
int SCR_LE_TRAP_MESS_KROOM; // ÷ùèïä.ìï÷õûëá.õâéô_ìïëáãéñ
int SCR_LE_SEX;  // ÷ùèïä.òïä

int SCR_LP_PORTAL; //ðïòôáì
int SCR_LP_ROOM;  //ðïòôáì.çäå
int SCR_LP_DIRECTION; //ðïòôáì.îáðòá÷ìåîéå
int SCR_LP_TYPE;  //ðïòôáì.ôéð
int SCR_LP_TIME;  //ðïòôáì.÷òåíñ
int SCR_LP_ROOMNUMBER;  //ðïòôáì.ìïëáãéñ
int SCR_LP_KEY;  //ðïòôáì.ëìàþ
int SCR_LP_DESCRIPTION; //ðïòôáì.ïðéóáîéå
int SCR_LP_ACTIVE;  //ðïòôáì.áëôé÷îùê
int SCR_LP_DEACTIVE; //ðïòôáì.äåáëôé÷îùê
int SCR_LP_MESS_CHAR; //ðïòôáì.éçòïë
int SCR_LP_MESS_ROOM; //ðïòôáì.ïóôáìøîùí
int SCR_LP_WORK_TIME; //ðïòôáì.÷òåíñ_òáâïôù

int SCR_DELETE;  //õäáìåîéå
int SCR_DOBJ;  //õäáìåîéå.ðòåäíåô
int SCR_DEQ;  //õäáìåîéå.éî÷åîôáòø
int SCR_DMOB;  //õäáìåîéå.íïîóôò
int SCR_DGOLD;  //õäáìåîéå.äåîøçé
int SCR_DEXIT;  //õäáìåîéå.÷ùèïä
int SCR_DE_ROOM;  //÷ùèïä,çäå
int SCR_DE_DIRECTION; //÷ùèïä.îáðòá÷ìåîéå
int SCR_DPORTAL;  //õäáìåîéå.ðïòôáì
int SCR_DP_ROOM;  //ðïòôáì.çäå
int SCR_DP_DIRECTION; //ðïòôáì.îáðòá÷ìåîéå
int SCR_DCHAR;  //õäáìåîéå.éçòïë
int SCR_DROOM;  //õäáìåîéå.ïóôáìøîùí

int SCR_SPELL;  //úáëìéîáîéå
int SCR_SPELL_NO; //úáëìéîáîéå.îïíåò
int SCR_SPELL_LEVEL; //úáëìéîáîéå.õòï÷åîø
int SCR_SPELL_MCHAR; //úáëìéîáîéå.éçòïë
int SCR_SPELL_MROOM; //úáëìéîáîéå.ìïëáãéñ

int SCR_TELEPORT; //ðåòåíåýåîéå
int SCR_TWHERE;  //çäå
int SCR_TROOM;  //ëïíîáôá
int SCR_TCHAROUT; //éïôâùôéå
int SCR_TCHARIN; //éðòéâùôéå
int SCR_TROOMOUT; //ëïôâùôéå
int SCR_TROOMIN; //ëðòéâùôéå


int SCR_VAR;  //ðåòåíåîîáñ
int SCR_VAR_NAME; //ðåòåíåîîáñ.îáú÷áîéå
int SCR_VAR_VALUE; //ðåòåíåîîáñ.úîáþåîéå
int SCR_VAR_TIME; //ðåòåíåîîáñ.÷òåíñ

int SCR_GLB;  //çìïâáìøîáñ
int SCR_GLB_NAME; //çìïâáìøîáñ.îáú÷áîéå
int SCR_GLB_VALUE; //çìïâáìøîáñ.úîáþåîéå
int SCR_GLB_TIME; //çìïâáìøîáñ.÷òåíñ

int SCR_RESET;  //óâòïó

int SCR_AGRO;  //áçòåóóéñ
int SCR_AMOB;  //áçòåóóéñ.íïîóôò
int SCR_ATARGET; //áçòåóóéñ.ãåìø

int SCR_DAMAGE;    //÷òåä
int SCR_DAM_TARGET; //÷òåä.ãåìø
int SCR_DAM_SHANCE; //÷òåä.ûáîó
int SCR_DAM_TYPE;   //÷òåä.ô÷òåä
int SCR_DAM_DAMAGE; //÷òåä.ó÷òåä
int SCR_DAM_STYPE;  //÷òåä.òåúéóô
int SCR_DAM_SAVE;   //÷òåä.óïèòáîåîéå
int SCR_DAM_KVICT;  //÷òåä.õöåòô÷á
int SCR_DAM_KROOM;  //÷òåä.õìïëáãéñ
int SCR_DAM_HVICT;  //÷òåä.÷öåòô÷á
int SCR_DAM_HROOM;  //÷òåä.÷ìïëáãéñ
int SCR_DAM_MVICT;  //÷òåä.ðöåòô÷á
int SCR_DAM_MROOM;  //÷òåä.ðìïëáãéñ

int SCR_EXP; //ïðùô
int SCR_EXP_TYPE; //ôéð
int SCR_EXP_SCHAR; //éïäîïòáúï÷ùê
int SCR_EXP_SGROUP; //çïäîïòáúï÷ùê
int SCR_EXP_CHAR; //éçòïëõ
int SCR_EXP_GROUP; //çòõððå

int SCR_APPLY; //íïäéæéëáôïò

int SCR_CONTINUE; //ðòïäïìöåîéå
int SCR_CNT_VNUM; //ðòïäïìöåîéå.îïíåò
int SCR_CNT_TIMER; //ðòïäïìöåîéå.ôáêíåò


///////////////////////////////////////////////////////////////////////////////
CScr::CScr() {
}

CScr::~CScr() {
}
///////////////////////////////////////////////////////////////////////////////

CScr Scr;

bool CScr::Initialization(void) {
    SCR_NUMBER = Proto->AddItem(TYPE_INT, "äåêóô÷éå");
    SCR_EXPR = Proto->AddItem(TYPE_EXPR, "õóìï÷éå", false);
    SCR_MESSAGE = Proto->AddItem(TYPE_STRUCT, "óïïâýåîéå", false);
    CItemProto *mess = Proto->GetItem(SCR_MESSAGE);
    SCR_MVNUM = mess->AddItem(TYPE_INT, "çäå", false);
    SCR_MCHAR  = mess->AddItem(TYPE_STRING, "éçòïëõ", false);
    SCR_MROOM  = mess->AddItem(TYPE_STRING, "ìïëáãéñ", false);
    SCR_MZONE  = mess->AddItem(TYPE_STRING, "ïâìáóôø", false);
    SCR_ERROR = Proto->AddItem(TYPE_STRUCT, "ïûéâëá", false);
    CItemProto *error = Proto->GetItem(SCR_ERROR);
    SCR_ECHAR  = error->AddItem(TYPE_STRING, "éçòïëõ", false);
    SCR_EROOM  = error->AddItem(TYPE_STRING, "ìïëáãéñ", false);
    SCR_EZONE  = error->AddItem(TYPE_STRING, "ïâìáóôø", false);
    SCR_ESCRIPT = error->AddItem(TYPE_INT, "äåêóô÷éå", false);
    SCR_LOAD = Proto->AddItem(TYPE_STRUCT, "úáçòõúëá", false);
    CItemProto *load = Proto->GetItem(SCR_LOAD);
    SCR_LOBJ = load->AddItem(TYPE_STRLIST, "ðòåäíåô", false);
    SCR_LEQ = load->AddItem(TYPE_SCRIPT, "éî÷åîôáòø", false);
    SCR_LRANDOM = load->AddItem(TYPE_SCRIPT, "óìõþáêîùê", false);
    SCR_LMOB = load->AddItem(TYPE_STRLIST, "íïîóôò", false);
    SCR_OBJ_LIMIT = load->AddItem(TYPE_INT, "ìéíéô", false);
    SCR_LGOLD = load->AddItem(TYPE_INT, "äåîøçé", false);
    SCR_LEXIT = load->AddItem(TYPE_STRUCT, "÷ùèïä", false);
    CItemProto *exit = load->GetItem(SCR_LEXIT);
    SCR_LE_ROOM = exit->AddItem(TYPE_INT, "çäå", true);
    SCR_LE_DIRECTION = exit->AddItem(TYPE_LIST, "îáðòá÷ìåîéå", true,
                                     ParserConst.GetList(LIST_DIRECTIONS));
    SCR_LE_ROOMNUMBER = exit->AddItem(TYPE_INT, "ëïíîáôá");
    SCR_LE_DESCRIPTION = exit->AddItem(TYPE_STRING, "ïðéóáîéå", false);
    SCR_LE_NAME       = exit->AddItem(TYPE_STRING, "îáú÷áîéå", false);
    SCR_LE_ALIAS = exit->AddItem(TYPE_STRING, "óéîïîéíù", false);
    SCR_LE_KEY = exit->AddItem(TYPE_INT, "ëìàþ", false);
    SCR_LE_PROPERTIES = exit->AddItem(TYPE_VECTOR, "ó÷ïêóô÷á", false,
                                      ParserConst.GetVector(VEC_EXIT_PROP));
    SCR_LE_QUALITY   = exit->AddItem(TYPE_INT, "ëáþåóô÷ï", false);
    SCR_LE_SEX      = exit->AddItem(TYPE_LIST, "òïä", false,
                                    ParserConst.GetList(LIST_SEX));
    SCR_LE_TRAP = exit->AddItem(TYPE_STRUCT, "ìï÷õûëá", false);
    CItemProto *etrap = exit->GetItem(SCR_LE_TRAP);
    SCR_LE_TRAP_CHANCE = etrap->AddItem(TYPE_INT, "ûáîó");
    SCR_LE_TRAP_TYPEDAMAGE = etrap->AddItem(TYPE_LIST, "ô÷òåä", true,
                                            ParserConst.GetList(LIST_DAMAGE));
    SCR_LE_TRAP_FORCEDAMAGE = etrap->AddItem(TYPE_RANDOM, "ó÷òåä");
    SCR_LE_TRAP_SAVE = etrap->AddItem(TYPE_INT, "ðòåúéóô", false);
    SCR_LE_TRAP_MESS_CHAR = etrap->AddItem(TYPE_STRING, "éçòïë", false);
    SCR_LE_TRAP_MESS_ROOM = etrap->AddItem(TYPE_STRING, "ïóôáìøîùí", false);
    SCR_LE_TRAP_MESS_SCHAR = etrap->AddItem(TYPE_STRING, "òéçòïë", false);
    SCR_LE_TRAP_MESS_SROOM = etrap->AddItem(TYPE_STRING, "òïóôáìøîùí", false);
    SCR_LE_TRAP_MESS_KCHAR = etrap->AddItem(TYPE_STRING, "õâéô_éçòïë", false);
    SCR_LE_TRAP_MESS_KROOM = etrap->AddItem(TYPE_STRING, "õâéô_ìïëáãéñ", false);

    SCR_LPORTAL = load->AddItem(TYPE_STRUCT, "ðïòôáì", false);
    CItemProto *portal = load->GetItem(SCR_LPORTAL);
    SCR_LP_ROOM = portal->AddItem(TYPE_INT, "çäå", true);
    SCR_LP_DIRECTION = portal->AddItem(TYPE_LIST, "îáðòá÷ìåîéå", true,
                                       ParserConst.GetList(LIST_DIRECTIONS));
    SCR_LP_TYPE = portal->AddItem(TYPE_LIST, "ôéð", true,
                                  ParserConst.GetList(LIST_PORTAL_TYPES));
    SCR_LP_TIME = portal->AddItem(TYPE_INT, "÷òåíñ", false);
    SCR_LP_ROOMNUMBER = portal->AddItem(TYPE_INT, "ëïíîáôá");
    SCR_LP_KEY = portal->AddItem(TYPE_INT, "ëìàþ");
    SCR_LP_DESCRIPTION = portal->AddItem(TYPE_STRING, "óôòïëá");
    SCR_LP_ACTIVE = portal->AddItem(TYPE_STRING, "áëôé÷îùê");
    SCR_LP_DEACTIVE = portal->AddItem(TYPE_STRING, "äåáëôé÷îùê");
    SCR_LP_MESS_CHAR = portal->AddItem(TYPE_STRING, "éçòïë");
    SCR_LP_MESS_ROOM = portal->AddItem(TYPE_STRING, "ïóôáìøîùí");
    SCR_LP_WORK_TIME = portal->AddItem(TYPE_STRING, "÷òåíñ_òáâïôù", false);

    SCR_LCHAR = load->AddItem(TYPE_STRING, "éçòïëõ", false);
    SCR_LROOM = load->AddItem(TYPE_STRING, "ìïëáãéñ", false);


    SCR_DELETE = Proto->AddItem(TYPE_STRUCT, "õäáìåîéå", false);
    CItemProto *delt = Proto->GetItem(SCR_DELETE);
    SCR_DOBJ = delt->AddItem(TYPE_STRLIST, "ðòåäíåô", false);
    SCR_DEQ = delt->AddItem(TYPE_STRLIST, "éî÷åîôáòø", false);
    SCR_DMOB = delt->AddItem(TYPE_STRLIST, "íïîóôò", false);
    SCR_DGOLD = delt->AddItem(TYPE_INT, "äåîøçé", false);
    SCR_DEXIT = delt->AddItem(TYPE_STRUCT, "÷ùèïä", false);
    CItemProto *dexit = delt->GetItem(SCR_DEXIT);
    SCR_DE_ROOM = dexit->AddItem(TYPE_INT, "çäå", true);
    SCR_DE_DIRECTION = dexit->AddItem(TYPE_LIST, "îáðòá÷ìåîéå", true, ParserConst.GetList(LIST_DIRECTIONS));

    SCR_DPORTAL = delt->AddItem(TYPE_STRUCT, "ðïòôáì", false);
    CItemProto *dportal = delt->GetItem(SCR_DPORTAL);
    SCR_DP_ROOM = dportal->AddItem(TYPE_INT, "çäå", true);
    SCR_DP_DIRECTION = dportal->AddItem(TYPE_LIST, "îáðòá÷ìåîéå", true, ParserConst.GetList(LIST_DIRECTIONS));

    SCR_DCHAR = delt->AddItem(TYPE_STRING, "éçòïëõ", false);
    SCR_DROOM = delt->AddItem(TYPE_STRING, "ìïëáãéñ", false);

    SCR_SPELL = Proto->AddItem(TYPE_STRUCT, "úáëìéîáîéå", false);
    CItemProto *spell = Proto->GetItem(SCR_SPELL);
    SCR_SPELL_NO = spell->AddItem(TYPE_LIST, "îïíåò", false, ParserConst.GetList(LIST_SPELLS));
    SCR_SPELL_LEVEL = spell->AddItem(TYPE_INT, "õòï÷åîø", false);
    SCR_SPELL_MCHAR = spell->AddItem(TYPE_STRING, "éçòïëõ", false);
    SCR_SPELL_MROOM = spell->AddItem(TYPE_STRING, "ìïëáãéñ", false);

    SCR_TELEPORT = Proto->AddItem(TYPE_STRUCT, "ðåòåíåýåîéå", false);
    CItemProto *telep = Proto->GetItem(SCR_TELEPORT);
    SCR_TROOM = telep->AddItem(TYPE_INT, "ëïíîáôá", true);
    SCR_TWHERE = telep->AddItem(TYPE_INT, "çäå", false);
    SCR_TCHAROUT = telep->AddItem(TYPE_STRING, "éïôâùôéå", false);
    SCR_TCHARIN  = telep->AddItem(TYPE_STRING, "éðòéâùôéå", false);
    SCR_TROOMOUT  = telep->AddItem(TYPE_STRING, "ëïôâùôéå", false);
    SCR_TROOMIN   = telep->AddItem(TYPE_STRING, "ëðòéâùôéå", false);

    SCR_VAR = Proto->AddItem(TYPE_STRUCT, "ðåòåíåîîáñ", false);
    CItemProto *var = Proto->GetItem(SCR_VAR);
    SCR_VAR_NAME = var->AddItem(TYPE_STRING, "îáú÷áîéå", true);
    SCR_VAR_VALUE = var->AddItem(TYPE_STRING, "úîáþåîéå", true);
    SCR_VAR_TIME = var->AddItem(TYPE_INT, "÷òåíñ", false);

    SCR_GLB = Proto->AddItem(TYPE_STRUCT, "çìïâáìøîáñ", false);
    CItemProto *glb = Proto->GetItem(SCR_GLB);
    SCR_GLB_NAME = glb->AddItem(TYPE_STRING, "îáú÷áîéå", true);
    SCR_GLB_VALUE = glb->AddItem(TYPE_STRING, "úîáþåîéå", true);
    SCR_GLB_TIME = glb->AddItem(TYPE_INT, "÷òåíñ", false);

    SCR_RESET = Proto->AddItem(TYPE_INT, "óâòïó", false);

    SCR_AGRO = Proto->AddItem(TYPE_STRUCT, "áçòåóóéñ", false);
    CItemProto *agro = Proto->GetItem(SCR_AGRO);
    SCR_AMOB = agro->AddItem(TYPE_INT, "íïîóôò", true);
    SCR_ATARGET = agro->AddItem(TYPE_LIST, "ãåìø", false, ParserConst.GetList(LIST_TARGET));

    SCR_DAMAGE = Proto->AddItem(TYPE_STRUCT, "÷òåä", false);
    CItemProto *damage = Proto->GetItem(SCR_DAMAGE);
    SCR_DAM_TARGET = damage->AddItem(TYPE_LIST, "ãåìø", false, ParserConst.GetList(LIST_TARGET));
    SCR_DAM_SHANCE = damage->AddItem(TYPE_INT, "ûáîó", true);
    SCR_DAM_TYPE   = damage->AddItem(TYPE_LIST, "ô÷òåä", true, ParserConst.GetList(LIST_DAMAGE));
    SCR_DAM_DAMAGE = damage->AddItem(TYPE_STRING, "ó÷òåä", true);
    SCR_DAM_STYPE  = damage->AddItem(TYPE_LIST, "òåúéóô", true, ParserConst.GetList(LIST_SAVE_TYPES));
    SCR_DAM_SAVE   = damage->AddItem(TYPE_INT, "óïèòáîåîéå", false);
    SCR_DAM_KVICT  = damage->AddItem(TYPE_STRING, "õöåòô÷á", false);
    SCR_DAM_KROOM  = damage->AddItem(TYPE_STRING, "õìïëáãéñ", false);
    SCR_DAM_HVICT  = damage->AddItem(TYPE_STRING, "÷öåòô÷á", false);
    SCR_DAM_HROOM  = damage->AddItem(TYPE_STRING, "÷ìïëáãéñ", false);
    SCR_DAM_MVICT  = damage->AddItem(TYPE_STRING, "ðöåòô÷á", false);
    SCR_DAM_MROOM  = damage->AddItem(TYPE_STRING, "ðìïëáãéñ", false);

    SCR_EXP = Proto->AddItem(TYPE_STRUCT, "ïðùô", false);
    CItemProto *exp = Proto->GetItem(SCR_EXP);
    SCR_EXP_TYPE = exp->AddItem(TYPE_LIST, "ôéð", false, ParserConst.GetList(LIST_EXP_TYPE));
    SCR_EXP_SCHAR = exp->AddItem(TYPE_INT, "éïäîïòáúï÷ùê", false);
    SCR_EXP_SGROUP = exp->AddItem(TYPE_INT, "çïäîïòáúï÷ùê", false);
    SCR_EXP_CHAR = exp->AddItem(TYPE_INT, "éçòïëõ", false);
    SCR_EXP_GROUP = exp->AddItem(TYPE_INT, "çòõððå", false);

    SCR_APPLY = Proto->AddItem(TYPE_STRLIST, "÷ìéñîéå", false, ParserConst.GetList(LIST_APPLY));

    SCR_CONTINUE = Proto->AddItem(TYPE_STRUCT, "ðòïäïìöåîéå", false);
    CItemProto *next = Proto->GetItem(SCR_CONTINUE);
    SCR_CNT_VNUM = next->AddItem(TYPE_INT, "îïíåò", true);
    SCR_CNT_TIMER = next->AddItem(TYPE_INT, "ôáêíåò", false);

    return CheckInit();
}

